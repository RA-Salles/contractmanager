This is how i'm thinking it should be done:
    user should have pass and log id. This gotta be checked.
    Meaning we need a database of users along with info.
    And this should be encrypted, but we can handle
    this later. 
    Thing is: the user experience should go on as such
        user logs with id and pass
            SYS:
                check for id in database   
                check for pass
                if id and pass is match:
                    loads user data
                else:
                    fuck ya'll!
        user if logged:
            able to pay, receive. historic and stuff too
            credit stuff too. 
        else:
            got sent back to log in screen
            warn user authentication provided
            ain't working.
    and the adm exp should be as such:
        try and log with the id MEISTER and pass MARKETINVISHAND
        if logged:
            able to do user stuff and added funcs, these being:
                exclude user;
                add user;
                move money;
            these added functionalities should be always checking 
            if the user is meister, else we're letting a commoner
            do master level fuckery with the system. Quite funny.
            Dangerous, too. 

Also, the filesys should work like this:
    database
    |
    L...MEISTER
        L...Auth.csv
        L...Hist.csv
        L...Acc.csv
    L...user1
        L...same
    L...user2
        L...same
Those three archives [auth,hist,acc] should be ideally cryptographed. While MEISTER is the filename, 
meaning pandas will need to search for a file with this name, a simpler model, which will be used for
a while is to simply check inside the auth file if the password is the same as the password
provided. Ideally, whatever is inside the file should be cryptographed and the password is needed
to decrypt it. The whole database should also be fully cryptographed with a master password. A very
very long key, hardcoded inside the program. Meaning during a deploy, the program will also
generate the password and hardcode itself with it. That should do the trick. At least for now,
this auth thing should work. 


